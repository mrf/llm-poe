name: Coverage Comment

on:
  workflow_run:
    workflows: ["Tests"]
    types:
      - completed

permissions:
  pull-requests: write
  contents: read

jobs:
  coverage-comment:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success'

    steps:
    - name: Download coverage artifact
      uses: actions/download-artifact@v4
      with:
        name: coverage-html-report
        path: htmlcov/
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Extract coverage percentage
      id: coverage
      run: |
        if [ -f htmlcov/index.html ]; then
          COVERAGE=$(grep -oP 'pc_cov">\K[0-9]+' htmlcov/index.html | head -1)
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        else
          echo "percentage=N/A" >> $GITHUB_OUTPUT
        fi

    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const coverage = '${{ steps.coverage.outputs.percentage }}';
          const body = `## ðŸ“Š Test Coverage Report

          **Coverage:** ${coverage}%

          - âœ… All tests passed
          - ðŸ“¦ Coverage report artifact available in workflow run

          [View detailed coverage report in artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }})
          `;

          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('Test Coverage Report')
          );

          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
